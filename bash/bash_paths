#!/bin/bash

# vim: ai ts=2 sw=2 et sts=2


## bash_paths
#
## Directories to be prepended to PATH
#declare -a dirs_to_prepend=(
#    "/usr/local/bin" # Ensure that this bin always takes precedence over `/usr/bin`
#)
#
## Directories to be appended to PATH
#declare -a dirs_to_append=(
#    "/usr/bin"
#    "$HOME/bin"
#    "$HOME/.dotfiles/bin"
#    "$HOME/.rvm/bin"
#    "usr/share/npm/bin" # Add npm-installed package bin
#)
#
## Prepend directories to PATH
#for index in ${!dirs_to_prepend[*]}
#do
#    if [ -d ${dirs_to_prepend[$index]} ]; then
#        # If these directories exist, then prepend them to existing PATH
#        PATH="${dirs_to_prepend[$index]}:$PATH"
#    fi
#done
#
## Append directories to PATH
#for index in ${!dirs_to_append[*]}
#do
#    if [ -d ${dirs_to_append[$index]} ]; then
#        # If these bins exist, then append them to existing PATH
#        PATH="$PATH:${dirs_to_append[$index]}"
#    fi
#done
#
#unset dirs_to_prepend dirs_to_append

# Functions to help us manage paths.  Second argument is the name of the
# path variable to be modified (default: PATH)
pathremove () {
        local IFS=':'
        local NEWPATH
        local DIR
        local PATHVARIABLE=${2:-PATH}
        for DIR in ${!PATHVARIABLE} ; do
                if [ "$DIR" != "$1" ] ; then
                  NEWPATH=${NEWPATH:+$NEWPATH:}$DIR
                fi
        done
        export $PATHVARIABLE="$NEWPATH"
}

pathprepend () {
        pathremove $1 $2
        local PATHVARIABLE=${2:-PATH}
        export $PATHVARIABLE="$1${!PATHVARIABLE:+:${!PATHVARIABLE}}"
}

pathappend () {
        pathremove $1 $2
        local PATHVARIABLE=${2:-PATH}
        export $PATHVARIABLE="${!PATHVARIABLE:+${!PATHVARIABLE}:}$1"
}

# Set the initial path
export PATH=/bin:/usr/bin:/usr/local/games/:/usr/games/

if [ $EUID -eq 0 ] ; then
    pathappend /sbin:/usr/sbin
fi

if [ -d /usr/local/lib/pkgconfig ] ; then
    pathappend /usr/local/lib/pkgconfig PKG_CONFIG_PATH
fi

if [ -d /usr/local/bin ]; then
    pathprepend /usr/local/bin
fi
if [ -d /usr/local/sbin -a $EUID -eq 0 ]; then
    pathprepend /usr/local/sbin
fi

for bindir in $HOME/bin $HOME/.dotfiles/bin $HOME/local/bin /opt/*/bin /usr/share/npm/bin ; do
    if [ -d $bindir ]; then
        pathprepend ${bindir}
    fi
done

if [ -d /var/www/yii/framework/ ]; then
    pathappend /var/www/yii/framework
fi

# Set java variables
# Needed the home of the JDK instead of the JRE
# Using: JAVA_HOME=$(readlink -f /usr/bin/javac | sed "s:bin/javac::")
if type -p java > /dev/null 2>&1 ; then
    JAVA_HOME=$(readlink -f `which javac` | sed "s:bin/javac::")
    JAVA_HOME=${JAVA_HOME%%/}
    export CLASSPATH=.:${JAVA_HOME}/lib/
    pathappend ${JAVA_HOME}/bin
fi

if [ $EUID -gt 99 ]; then
    pathappend .
fi

# Java;s CLASSPATH customization
#CLASSPATH=$CLASSPATH:~/foo/bar.jar
#export CLASSPATH

# Make sure pkg-config can find self-compiled software
# and libraries (installed to ~/usr)
#PKG_CONFIG_PATH=$PKG_CONFIG_PATH:~/local/lib/pkgconfig
export PKG_CONFIG_PATH

# Add custom compiled libraries to library search path.
# You must run the following command to activate path: ldconfig
# Verify Your New Library Path: ldconfig -v | less
#LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/local/lib
export LD_LIBRARY_PATH
 
# Add custom compiled libraries to library run path.
#LD_RUN_PATH=$LD_RUN_PATH:~/local/lib
export LD_RUN_PATH
 
# Add custom Python modules to the Python path.
#PYTHONPATH=$PYTHONPATH:~/slippenspythonlib
#PYTHONPATH=$PYTHONPATH:~/usr/lib/python2.5/site-packages
export PYTHONPATH


export PATH
