#!/bin/bash

# vim: ai ts=2 sw=2 et sts=2

# Functions to help us manage paths.  Second argument is the name of the
# path variable to be modified (default: PATH)
pathremove () {
        local IFS=':'
        local NEWPATH
        local DIR
        local PATHVARIABLE=${2:-PATH}
        for DIR in ${!PATHVARIABLE} ; do
                if [ "$DIR" != "$1" ] ; then
                  NEWPATH=${NEWPATH:+$NEWPATH:}$DIR
                fi
        done
        export $PATHVARIABLE="$NEWPATH"
}

pathprepend () {
        pathremove $1 $2
        local PATHVARIABLE=${2:-PATH}
        export $PATHVARIABLE="$1${!PATHVARIABLE:+:${!PATHVARIABLE}}"
}

pathappend () {
        pathremove $1 $2
        local PATHVARIABLE=${2:-PATH}
        export $PATHVARIABLE="${!PATHVARIABLE:+${!PATHVARIABLE}:}$1"
}

# Set the initial path
export PATH=/bin:/usr/bin:/usr/local/games/:/usr/games/

if [ $EUID -eq 0 ] ; then
    pathappend /sbin:/usr/sbin
fi

if [ -d /usr/local/lib/pkgconfig ] ; then
    pathappend /usr/local/lib/pkgconfig PKG_CONFIG_PATH
fi

if [ -d /usr/local/bin ]; then
    pathprepend /usr/local/bin
fi
if [ -d /usr/local/sbin -a $EUID -eq 0 ]; then
    pathprepend /usr/local/sbin
fi

for bindir in $HOME/bin $HOME/.dotfiles/bin $HOME/local/bin /opt/*/bin /usr/share/npm/bin ; do
    if [ -d $bindir ]; then
        pathprepend ${bindir}
    fi
done

if [ -d /var/www/yii/framework/ ]; then
    pathappend /var/www/yii/framework
fi

# JAVA =====================================================================
# Set java variables
# Needed the home of the JDK instead of the JRE
# Using: JAVA_HOME=$(readlink -f /usr/bin/javac | sed "s:bin/javac::")
if type -p java > /dev/null 2>&1 ; then
    JAVA_HOME=$(readlink -f `which javac` | sed "s:bin/javac::")
    JAVA_HOME=${JAVA_HOME%%/}
    export CLASSPATH=.:${JAVA_HOME}/lib/ # :~/foo/bar.jar
    pathappend ${JAVA_HOME}/bin
fi

if [ $EUID -gt 99 ]; then
    pathappend .
fi

# Local libraries
LOCAL="${HOME}/local"

if [ -d ${LOCAL} ]; then

    # MAN =====================================================================
    # Custom man pages
    export MANPATH=${LOCAL}/share/man:"$MANPATH"

    # Add custom compiled libraries to library search path.
    # You must run the following command to activate path: ldconfig
    # Verify Your New Library Path: ldconfig -v | lessexport LD_LIBRARY_PATH=${LOCAL}/lib:"${LD_LIBRARY_PATH}"
    export LIBRARY_PATH=${LOCAL}/lib:"${LIBRARY_PATH}"

    # Add custom compiled libraries to library run path.
    export LD_RUN_PATH=${LOCAL}/lib:"${LD_RUN_PATH}"

    export CPATH=${LOCAL}/include:"${CPATH}"

    # Make sure pkg-config can find self-compiled software
    export PKG_CONFIG_PATH=${LOCAL}/lib/pkgconfig

    # RUBY ====================================================================
    # Ruby gems install locally.
    export GEM_HOME="${LOCAL}"
    export GEM_PATH="${GEM_HOME}:${GEM_PATH}"
    export RUBYLIB="${GEM_HOME}/lib:${RUBY_LIB}"

else

    mkdir ${LOCAL}
fi


# PYTHON ======================================================================
# Custom Python interactive session configuration.
if [ -f "$HOME/.pythonrc" ]; then
    export PYTHONSTARTUP="$HOME/.pythonrc"
fi

export PATH
