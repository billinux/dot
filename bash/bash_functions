# vim: ai ts=2 sw=2 et sts=2 ft=sh

# Bash functions (~/.bash/functions)

# Add to ~/.bashrc:     if [ -f ~/.bash/functions ]; then
#                           . ~/.bash/functions
#                       fi

# FUNCTIONS/*{{{*/
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function myaliases #== Lists all system aliases in a nice, formatted manner. Used in @help/*{{{*/
{
    gawk 'BEGIN { printf("\33[1;7;32m%-15s\33[34m%-77s\n\33[0m"," Alias"," Description") }'
    alias | awk --field-separator="=" '{printf(" \033[32m%-15s\033[34m%-80s\n\033[0m",$1,$2)}' | sed s/"'"// | sed s/"'"//
}
#/*}}}*/
function myfunctions #== Lists all system functions in a nice, formatted manner. Used in @help/*{{{*/
{
    gawk 'BEGIN { printf("\33[1;7;32m%-20s\33[34m%-77s\33[0m"," Function"," Description") }'
    cat /etc/bash_aliases | gawk --field-separator=" #== " '/^function/{ sub(/function /,""); printf(" \033[32m%-20s\033[34m%-80s\n\033[0m",$1,$2)}' | sort
    #cat $HOME/dotfiles/zsh/functions | gawk --field-separator=" #== " '/^function/{ sub(/function /,""); printf(" \033[32m%-20s\033[34m%-80s\n\033[0m",$1,$2)}' | sort
}
#/*}}}*/
function myscripts #== Lists all scripts in a nice, formatted manner. Used in @help/*{{{*/
{
    gawk 'BEGIN { printf("\33[1;7;32m%-10s\33[34m%-77s\n\33[0m"," Script"," Description") }'
    (cd $HOME/bin && egrep '^#== ' * | gawk -F : '{ printf(" \033[32m%-10s\033[34m%-80s\n\033[0m",$1,$2)}' | sed -e "s/#== //")
}
#/*}}}*/
function mykeys #== Lists all xmonad keybindings in a nice, formatted manner. Used in @help/*{{{*/
{
    gawk 'BEGIN { printf("\33[1;7;32m%-25s\33[34m%-75s\n\33[0m"," Key"," Binding") }'
    grep --color ', ("\(<\|M\)' ~/.xmonad/xmonad.hs | sed -e 's!"!!' -e 's!(!!' -e 's!)!!' | awk -F , '{printf("\033[32m%-25s \033[0;34m%-75s\n\033[0m",$2,$3)}' | sed -e 's!"!!'
}
#/*}}}*/
function @help #== Personal help system/*{{{*/
{
    case $1 in
        aliases)   myaliases   ;;
        functions) myfunctions ;;
        scripts)   myscripts   ;;
        keys)      mykeys      ;;
        *)         echo "${bld}${red}*${rst}You did not enter valid input." ;;
    esac
}
#/*}}}*/


function welcome #== Welcome message/*{{{*/
{
  clear
#  os=$(lsb_release -si)
#  arch=$(uname -m | sed 's/x86_//;s/i[3-6]86/32/')
#  ver=$(lsb_release -sr)
  # Capitalize a string : ${string^}
  echo -e "${red}";figlet " ${os^} Linux";echo "${rst}"
  #echo -e "${blu}";clear && cowsay -f tux $(uname -r) && figlet $(cat /etc/debian_version);echo ""
  echo -ne "${ylw}Aujourd'hui${rst}:\t\t${cyn}"`date`; echo "${rst}"
  echo -e "${ylw}Distribution${rst}:\t\t${cyn}"`lsb_release -d | cut -f2`
  echo -e "${ylw}Information du kernel${rst}:\t${cyn}"`uname -omr`
  echo -e "${ylw}Hôte${rst}: \t\t\t${cyn}"`hostname -f`
  echo -ne "${rst}";upinfo;
  case "$TERM" in
    linux)
        echo -e "${rst}${wht}"; cal -3
        ;;
    *)
        echo -e "${bld}${wht}"; cal -3
        ;;
    esac

  echo "";
}
#/*}}}*/
function upinfo #== Uptime info/*{{{*/
{
  echo -ne "${ylw}Uptime${rst}:\t\t\t${cyn}";uptime | awk /'up/ {print $3,$4,$5,$6,$7,$8,$9,$10}'
}
#/*}}}*/
function backup #== Backup file in ~/backup/*{{{*//*}}}*//*{{{*/
{
  file=${1:?"error: I need a file to backup"}

  timestamp=$(date '+%d.%m.%Y')
  backupdir=~/backups

  [ -d ${backupdir} ] || mkdir -p ${backupdir}
  cp -a ${file} ${backupdir}/$(basename ${file})-${timestamp}
  return $?
}
#/*}}}*/
function encrypt #== Encrypt & file/*{{{*/
{
    gpg -ac --no-options "$1"
}
#/*}}}*/
function decrypt #== decrypt & file/*{{{*/
{
    gpg --no-options "$1"
}
#/*}}}*/
function netinfo #== display network infos/*{{{*/
{
    echo "---------------${bld}${blu} Network Information ${rst}---------------"
    /sbin/ifconfig | awk /'inet addr/ {print $2}'
    /sbin/ifconfig | awk /'Bcast/ {print $3}'
    /sbin/ifconfig | awk /'inet addr/ {print $4}'
    /sbin/ifconfig | awk /'HWaddr/ {print $4,$5}'
    myip=`lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | sed '/^$/d; s/^[ ]*//g; s/[ ]*$//g' `
    echo "${myip}"
    echo "---------------------------------------------------"
}
#/*}}}*/
function colors #== display terminal colors/*{{{*/
{
    T='>>='   # The test text
    echo -e "\n                 40m     41m     42m     43m     44m     45m     46m     47m";
    for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m'            '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m'            '  36m' '1;36m' '  37m' '1;37m';
        do FG=${FGs// /}
        echo -en " $FGs \033[$FG  $T  "
        for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
            do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
        done
        echo;
    done
}
#/*}}}*/
function dirsize #== display directory size/*{{{*/
{
    du -shx * [a-zA-Z0-9_] 2> /dev/null | \
    egrep '^ *[0-9.]*[MG]' | sort -n > /tmp/list
    egrep '^ *[0-9.]*M' /tmp/list
    egrep '^ *[0-9.]*G' /tmp/list
    rm -rf /tmp/list
}
#/*}}}*/
function curdirsize #== display current directory size/*{{{*/
{
    du -hs | gawk '{print $1}'
}
#/*}}}*/
function md #== mkdir & cd a directory/*{{{*/
{
    mkdir -p "$1" && cd "$1";
}
#/*}}}*/
function cp_p #== copy with a progession bar/*{{{*/
{
    local params=( "$@" )
 # Le dernier champs est la destination
 unset params[$(( ${#params[@]} - 1 ))]
 # $COLUMNS correspond à la largeur de votre terminal
 # et est mise à jour après chaque commande si l'option
 # checkwinsize est définie ou à la réception du signal WINCH
 kill -s WINCH $$
 [ $COLUMNS -lt 20 ] && (cp -a -- "$@"; return $?)
 lim=$(( $COLUMNS - 10 ))
 # Les "--" sont là pour signifier qu'il n'y a pas d'options
 # sinon, il faut modifier le "du" etc...
 # J'utilise le "-a" pour pouvoir copier par exemple des
 # répertoires sans soucis.
 strace -e write cp -a -- "$@" 2>&1 |
 awk '{
 count += $NF    # rajoute la valeur du dernier champs
 # 10 représente la fréquence d affichage
 if (count % 10 == 0)
 {
 percent = count / total_size * 100
 printf "%3d%% [", percent
 for (i=0;i<=percent*'$lim'/100;i++)
 printf "="
 if (percent<100)
 printf ">"
 for (j=i;j< '$lim';j++)
 printf " "
 printf "]\r"
 }
 }
 END { printf "100\n" }' \
 total_size=$(du -bc "${params[@]}" | awk 'END {print $1}') \
 count=0
}
#/*}}}*/
function ecolor #== echo a 256 color/*{{{*/
{
    echo -ne "\e[38;5;$1m";
}
#/*}}}*/
function cd #== Automatically do an ls after each cd/*{{{*/
{
  if [ -n "$1" ]; then
    builtin cd "$@" && ls
  else
    builtin cd ~ && ls
  fi
}
#/*}}}*/
function down #== No more cd ../../../.. but up 4/*{{{*/
{
  local d=""
  limit=$1
  for ((i=1 ; i <= limit ; i++))
    do
      d=$d/..
    done
  d=$(echo $d | sed 's/^\///')
  if [ -z "$d" ]; then
    d=..
  fi
  cd $d
}
#/*}}}*/
function aa_256 #== Display all 256 colors in terminal/*{{{*/
{
  local o x=`tput op` y=`printf %$((${COLUMNS}-6))s`;
  for i in {0..256};
  do
    o=00$i;
    echo -e ${o:${#o}-3:3} `tputm "setaf $i" "setab $i"`${y// /=}$x;
  done
}

tputm ()
{
  local a;
  for a in "$@";
  do
    echo -en "${a}\n";
  done | tput -S
}
#/*}}}*/
function a256 #== Display gray 256 colors in terminal/*{{{*/
{
  ( x=`tput op` y=`printf %$((${COLUMNS}-6))slocal `;
  for i in {242..232} 232 232;
  do
    echo -en "`tput setaf $i;tput setab $i`${y}${x}`tput op`";
  done )
}
#/*}}}*/
function check_terminfo #== Display all terminal info/*{{{*/
{
  tput clear;
  pm "$TERM: [colors:`tput colors`/`tput pairs`]";
  RC=`tput op` L1=$(L '=' $(( ${COLUMNS} - 25 )));
  for i in `seq ${1:-0} ${2:-16}`;
  do
    o="  $i";
    echo -e " ${o:${#o}-3:3} `tput setaf $i;tput setab $i`${L1}${RC}";
  done
}
#/*}}}*/
function logview #== View colored logs/*{{{*/
{
  ccze -A < $1 | less -R
}
#/*}}}*/
function load #== Change load color according his value/*{{{*/
{
  Load=`cat /proc/loadavg | awk '{print $1}'`
  IntLoad=`echo $Load | cut -f1 -d.`
  if [ $IntLoad -le 0 ] ; then
    LoadColor=
  elif [ $IntLoad -le 1 ] ; then
    LoadColor=${cyn}
  elif [ $IntLoad -le 4 ] ; then
    LoadColor=${red}
  else
    LoadColor=${bred}
  fi

  echo -e " [$LoadColor$Load${blk}] "
}
#/*}}}*/
function myaddpath #== This addpath adds a path only if it's not already in $PATH and it's a dir./*{{{*/
{
  case :$PATH: in *:$1:*) ;; *) [ -d $1 ] && PATH="$PATH${PATH:+:}$1" ;; esac
}
#/*}}}*/
function myaddpath #== Whois sans les commentaires/*{{{*/
{
  whois $1 | grep -v "^%"|most
}
#/*}}}*/
function myaddpath #== Search gpg key/*{{{*/
{
  gpg --keyserver pgp.mit.edu --search-key "$1";
}
#/*}}}*/
function lsml #== Quels sont les fichiers arrivés/*{{{*/
{
  clear && ssh login@server "ls -lha --color=always /var/mldonkey/incoming/files/"
}
#/*}}}*/
function repeat #== Repeat n times command/*{{{*/
{
  local i max
  max=$1; shift;
  #    for (( i=1; i<=max; i++ ))
  #    do
  #        eval "$@";
  #    done
}
#/*}}}*/
function ask #== killps to kill a process by ask ?/*{{{*/
{
  echo -n "$@" '[y/n] ' ; read ans
  case "$ans" in
    y*|Y*) return 0 ;;
  *) return 1 ;;
esac
}
#/*}}}*/
function killps #== Kill process by name, works with gawk too/*{{{*/
{
  local pid pname sig="-TERM" # default signal
  if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
    echo "Usage: killps [-SIGNAL] pattern"
    return;
  fi
  if [ $# = 2 ]; then sig=$1 ; fi
  for pid in $(my_ps | nawk '!/nawk/ && $0~pat { print $2 }' pat=${!#}) ; do
    pname=$(my_ps | nawk '$2~var { print $6 }' var=$pid )
    if ask "Kill process $pid <$pname> with signal $sig ? "
    then kill $sig $pid
    fi
  done
}
#/*}}}*/
function ff #== Find a file with a pattern in name, in ~//*{{{*/
{
  find . -type f -iname '*'$*'*' -ls ;
}
#/*}}}*/
function ffslash #== Find a file with a pattern in name, in /:/*{{{*/
{
  find / -type f -iname '*'$*'*' -ls ;
}
#/*}}}*/
function fstr #== Find a string in a set of files locally/*{{{*/
{
  if [ "$#" -gt 2 ]; then
    echo "Usage: fstr \"pattern\" [files] "
    return;
  fi
  SMSO=$(tput smso)
  RMSO=$(tput rmso)
  find . -type f -name "${2:-*}" -print | xargs grep -sin "$1" | \
    sed "s/$1/$SMSO$1$RMSO/gI"
}
#/*}}}*/
function fstrslash #== Find a string in a set of files in //*{{{*/
{
  if [ "$#" -gt 2 ]; then
    echo "Usage: fstr \"pattern\" [files] "
    return;
  fi
  SMSO=$(tput smso)
  RMSO=$(tput rmso)
  sudo find / -type f -name "${2:-*}" -print | xargs grep -sin "$1" | sed "s/$1/$SMSO$1$RMSO/gI"
}
#/*}}}*/
function swap #== Swap 2 filenames around/*{{{*/
{
  local TMPFILE=tmp.$$
  mv "$1" $TMPFILE
  mv "$2" "$1"
  mv $TMPFILE "$2"
}
#/*}}}*/
function lowercase #== Move filenames to lowercase/*{{{*/
{
  for file ; do
    filename=${file##*/}
    case "$filename" in
      */*) dirname=${file%/*} ;;
      *) dirname=.;;
    esac

    nf=$(echo $filename | tr A-Z a-z)
    newname="${dirname}/${nf}"
    if [ "$nf" != "$filename" ]; then
      mv "$file" "$newname"
      echo "lowercase: $file --> $newname"
    else
      echo "lowercase: $file not changed."
    fi
done
}
#/*}}}*/
function fncorrect_lowercase #== Correct filenames to lowercase/*{{{*/
{
  if [ "$#" = 0 ]
  then
    echo "Usage: fncorrect_lowercase [filenames...]"
    return 0
  fi

  for arg in "$@"
  do
    filename=`basename "$arg"`
    dirname=`dirname "$arg"`
    oldname=`echo "$filename" | sed -e "s/ /\\\\ /"`
    newname=`echo "$filename" | tr A-Z a-z`
    if [ ! -e "$dirname/$oldname" ];
    then
      echo "$dirname/$oldname does not exists."
    elif [ "$oldname" = "$newname" ]
    then
      echo "$dirname/$oldname needs no change, skipping..."
    elif [ -e "$dirname/$newname" ]
    then
      echo "$dirname/$newname exists, skipping..."
    else
      mv "$dirname/$oldname" "$dirname/$newname"
      echo "$dirname/$oldname => $dirname/$newname"
    fi
  done
}
#/*}}}*/
function fncorrect_spaces #== Correct spaces in filenames/*{{{*/
{
  if [ "$#" = 0 ]
  then
    echo "Usage: fncorrect_spaces [filenames...]"
    return 0
  fi

  for arg in "$@"
  do
    filename=`basename "$arg"`
    dirname=`dirname "$arg"`
    oldname=`echo "$filename" | sed -e "s/ /\\\\ /"`
    newname=`echo "$filename" | sed -e : -e s/\ /_/ -e s/%20/_/ -e s/%28/[/ -e s/%29/]/ -e s/%5B/[/ -e s/%5D/]/ -e t`
    if [ ! -e "$dirname/$oldname" ];
    then
      echo "$dirname/$oldname does not exists."
    elif [ "$oldname" = "$newname" ]
    then
      echo "$dirname/$oldname needs no change, skipping..."
    elif [ -e "$dirname/$newname" ]
    then
      echo "$dirname/$newname exists, skipping..."
    else
      mv "$dirname/$oldname" "$dirname/$newname"
      echo "$dirname/$oldname => $dirname/$newname"
    fi
  done
}
#/*}}}*/
function psgrep #== Greps the running process list for the value of $1/*{{{*/
{
  local name=$1
  ps aux | grep "${name}" | sed '$d'
  unset $name
}
#/*}}}*/
function gojo #== Tries to unarchive anything thrown at it/*{{{*/
{
  local FILENAME="${1}"
  local FILEEXTENSION=`echo ${1} | cut -d. -f2-`
  case "$FILEEXTENSION" in
    tar)
      tar xvf "$FILENAME";;
    tar.gz)
      tar xzvf "$FILENAME";;
    tgz)
      tar xzvf "$FILENAME";;
    gz)
      gunzip "$FILENAME";;
    tbz)
      tar xjvf "$FILENAME";;
    tbz2)
      tar xjvf "$FILENAME";;
    tar.bz2)
      tar xjvf "$FILENAME";;
    tar.bz)
      tar xjvf "$FILENAME";;
    bz2)
      bunzip2 "$FILENAME";;
    tar.Z)
      tar xZvf "$FILENAME";;
    Z)
      uncompress "$FILENAME";;
    zip)
      unzip "$FILENAME";;
    rar)
      unrar x "$FILENAME";;
  esac
}
#/*}}}*/
function sendbashrc #== Send your bashrc into another server/*{{{*/
{
  scp ~/.bashrc $1:~/.bashrc.$HOST
}
#/*}}}*/
function sendbash_alias #== Send your bash_aliases into another server/*{{{*/
{
  : ${HOSTNAME?"/Error/ Hostname must to be set"}
  scp /etc/bash_aliases ${2-root}@$1:/etc/bash_aliases_`date +%d.%m.%Y`.$HOSTNAME
}
#/*}}}*/
function larping #== Finds machines sending abnormal amounts of arp requests/*{{{*/
{
  /usr/sbin/tcpdump -vv -l -n arp | egrep 'arp who-has' | head -100 | awk '{ print $NF }' |sort | uniq -c | sort -n
}
#/*}}}*/

function mktar #== Create a "tar archive"/*{{{*/
{
    tar cvf  "${1%%/}.tar"     "${1%%/}/";
}
#/*}}}*/
function mktgz #== Create a "tar.gz archive"/*{{{*/
{
    tar cvzf "${1%%/}.tar.gz"  "${1%%/}/";
}
#/*}}}*/
function mktbz #== Create a "tar.bz2 archive"/*{{{*/
{
    tar cvjf "${1%%/}.tar.bz2" "${1%%/}/";
}
#/*}}}*/
function extra #== uncompress file/*{{{*/
{
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       rar x $1       ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}
#/*}}}*/
function extract #== Uncompress all archive/*{{{*/
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjvf $1   ;;
      *.tar.gz)    tar xzvf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xvf $1    ;;
      *.tbz2)      tar xjvf $1   ;;
      *.tgz)       tar xzvf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo -e "${bldred}'$1' ne peut pas etre decompresse avec ex()" ;;
    esac
  else
    echo -e "\n${bldred}'$1' n'est pas un fichier valide"
  fi
}
# extract - Extraire une archive
# usage: extract <fichier>
#/*}}}*/
function clock #== Display a clock in the terminal/*{{{*/
{
    while true;do clear;echo -e "\e[30;1m===========\e[0m\e[01;33m";date +"%r";echo -e "\e[0m\e[30;1m===========\e[0m";sleep 1;done;
}
# clock - Affiche une horloge simple
# usage: clock
#/*}}}*/
function definef #== French word definition in google/*{{{*/
{
    local y="$@";curl -sA"Opera" "http://www.google.fr/search?q=define:${y// /+}"|grep -Po '(?<=<li>)[^<]+'|nl|perl -MHTML::Entities -pe 'decode_entities($_)' 2>/dev/null;
}
# definef - Definition francaise d'un mot a l'aide de google
# usage: definef <mot>
#/*}}}*/
function define #== English word definition in google/*{{{*/
{
    local y="$@";curl -sA"Opera" "http://www.google.com/search?q=define:${y// /+}"|grep -Po '(?<=<li>)[^<]+'|nl|perl -MHTML::Entities -pe 'decode_entities($_)' 2>/dev/null;
}
# define - Definition Anglaise d'un mot a l'aide de google
# usage: definef <word>
#/*}}}*/
function resetperm #== Restore default permissions (644/755)/*{{{*/
{
  chmod -R u=rwX,go=rX "$@"
  chown -R ${USER}:users "$@"
}
# resetperm - restaurer les permissions des repertoires et fichiers avec leurs valeurs "normales" (644/755)
# usage: resetperm <dossier>
#/*}}}*/
function XXX #== Display symbolic permissions in octal (644)/*{{{*/
{
    sed -e 's/--x/1/g' -e 's/-w-/2/g' -e 's/-wx/3/g' -e 's/r--/4/g'  -e 's/r-x/5/g' -e 's/rw-/6/g' -e 's/rwx/7/g' -e 's/---/0/g' ;
}
# XXX - mise en forme des permissions symbolic en octal (644)
# usage : ls -l | XXX
#/*}}}*/
function changeEncoding #== Convert a file from iso2utf8 and utf82iso, usage : changeEncoding <fichier>/*{{{*/
{
  if [ -f "$1" ] ; then
    case "`file -bi "$1"`" in
      *iso-8859-1)   iconv --from-code=ISO-8859-1 --to-code=UTF-8 "$1" > "$1".utf-8 && echo -e "\n${bldgrn}Nouveau fichier : "$1".utf-8"  ;;
      *utf-8)   iconv --from-code=UTF-8 --to-code=ISO-8859-1 "$1" > "$1".iso-8859-1 && echo -e "\n${bldgrn}Nouveau fichier : "$1".iso-8859-1" ;;
      *us-ascii)   echo -e "\n${bldylw}Encodage US-ASCII pas besoin de convertir"   ;;
      *)           echo -e "\n${bldred}L'encodage de '$1' ne peut pas etre converti avec changeEncoding(`file -bi "$1"`)" ;;
    esac
  else
    echo -e "\n${bldred}'$1' n'est pas un fichier valide"
  fi
}
# Convertir l'encodage d'un fichier iso2utf8/utf82iso
# Usage : changeEncoding <fichier>
#/*}}}*/
function dtc #== Display a quote from danstonchat.com, usage : dtc/*{{{*/
{
  url=http://danstonchat.com/random.html?toto=`date +%N` 
  lynx --dump --display_charset=utf8 $url 2>&1 \
    | awk '$1~"#" && $0!~"RSS" { getline; while ($1!~"#") { print $0; getline;}; exit}'
}
# Afficher une quote depuis danstonchat.com
# usage: dtc
#/*}}}*/
function wdl #== Download a website with wget, usage: wdl <URL>/*{{{*/
{
  wget -r -l5 -k -E ${1} && cd $_;
}
# télecharger un site complet avec Wget
# Les pages seront mise en html (E), les liens seront transformés (k) et c'est récursif (r) sur 5 niveaux maxi (l5)
# Usage wdl <URL>
# tip : utiliser servethis pour servir les pages télechargées
#/*}}}*/
function screenshot #== Take a screenshot, usage: screenshot [delai en sc] [qualite]/*{{{*/
{
    if ! which scrot &>/dev/null; then
        echo "${FUNCNAME[0]}(): Vous devez d'abord installer 'scrot'."
        return 1
    fi

    local delay=1
    local quality=95

    [ "$1" ] && delay="$1"
    [ "$2" ] && quality="$2"

    scrot -q $quality -d $delay "$HOME/screenshot_`date +'%F_%Hh%M'`.jpg"
}
# Prendre une capture d'écran
# Usage: screenshot [delai en sc] [qualite]
#/*}}}*/
function toascii #== Transform an image (from an URL) into an ascii html, usage : toascii <URL>/*{{{*/
{
  convert $1 jpg:- | jp2a - --color --fill --background=light --html > $HOME/ascii_`date +'%F_%Hh%M'`.html;
}
# Transforme une image (depuis une URL) en ascci html
# servethis pour voir sur le port 8000 ou mongoose http://code.google.com/p/mongoose/
# usage : toascii <URL>
#/*}}}*/
function galerie # Build a photo album with all photos in a folder, usage : galerie/*{{{*/
{
  echo -e "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1- \
transitional.dtd\">\n<HTML>\n<head>\n<title>Galerie photo du `date +'%F_%Hh%M'`</title>\n\n<style type=\"text/css\">\nhtml \
, body {\n\tmargin: 0px;\n\tpadding: 0px;\n\tborder: 0px;\n}\n#main {\n\tmargin: 5px 20px;\n}\ndiv.left {\n\tfloat: left;\n\tmargin \
-right: 300px;\n\twidth: 400px;\n\tmargin-bottom: 10px;\n}\ndiv.left p {\n\ttext-align: center;\n}\nimg {\n\tborder: 0px none;\n}\ndiv. \
center {\n\twidth: 600px;\n}\n.clear {\n  clear : both;\n}\n</style>\n</head>\n\n<body>\n<div id=\"main\">\n  <h1>Galerie photo du \
 `date +'%F_%Hh%M'`</h1>\n" > galerie_`date +'%F'`.html;
  for i in *.{jpg,jpeg,png,gif,JPG,JPEG,PNG,GIF};
   do echo -e "\t<div class="left">\n\t\t<a href="http://www.bordel-de-nerd.net/2010/08/configurer-son-terminal-bash/"><img src="http://www.bordel-de-nerd.net/2010/08/configurer-son-terminal-bash/" width="300" height="300" border="0" /></a><br />\n\t\t<p>$i</p>\n\t</div>\n";
  done >> galerie_`date +'%F'`.html
  echo -e "</div>\n</body>\n</html>" >> galerie_`date +'%F'`.html
  echo -e "\n${bldgrn}La galerie galerie_`date +'%F'`.html contient les photos du dossier `pwd`."
}
# Construire une galerie html avec toutes les photo d'un dossier
# usage : galerie
#/*}}}*/
function chext #== Modification of file extension, usage : chext new_ext *.old_ext/*{{{*/
{
  local fname
  local new_ext="$1"
  shift
  IFS=$'\n'
  for fname in $@
  do
    mv "$fname" "${fname%.*}.$new_ext"
  done
}
# chext - modifier l'extension
# usage : chext new_ext *.old_ext
#/*}}}*/
function cbt #== Display files number by types, usage : cbt/*{{{*/
{
  find ${*-.} -type f -print0 | xargs -0 file | awk -F, '{print $1}' | awk '{$1=NULL;print $0}' | sort | uniq -c | sort -nr ;
}
# cbt - Count by Type - affiche le nombre de fichiers par type
# usage : cbt
#/*}}}*/
function toLowercase #== Rename in lowercase, usage tolowercase <*.txt>/*{{{*/
{
  for i in "$@"; do mv -f "$i" "`echo $i| tr [A-Z] [a-z]`" &>/dev/null; done
}
# Renomme en minuscules
# usage tolowercase <*.txt>
#/*}}}*/
function toUpercase #== Rename in uppercase, usage toupercase <*.txt>/*{{{*/
{
  for i in "$@"; do mv -f "$i" "`echo $i| tr [a-z] [A-Z]`" &>/dev/null; done
}
# Renomme en majuscules
# usage toupercase <*.txt>
#/*}}}*/
function underscorespace #== Replace spaces by underscore, usage underscorespace <*.txt>/*{{{*/
{
  for i in "$@"; do mv "$i" "`echo $i| tr ' ' '_'`" &>/dev/null; done
}
# remplacer les espaces par des _
# usage underscorespace <*.txt>
#/*}}}*/
function getserver #== Determine the server using by a site, usage : getserver <URL> /*{{{*/
{
  curl -I $1  2>&1 | grep Server;
}
# getserver - Determine le serveur utilisé par un site 
# usage : getserver <URL> 
#/*}}}*/
function start #== Start a daemon, usage: start nom_du_daemon/*{{{*/
{
  for arg in $*; do sudo /etc/init.d/$arg start; done
}
#/*}}}*/
function stop #== Stop a daemon, usage: stop nom_du_daemon/*{{{*/
{
  for arg in $*; do sudo /etc/init.d/$arg stop; done
}
#/*}}}*/
function restart #== Restart a daemon, usage: restart nom_du_daemon/*{{{*/
{
  for arg in $*; do sudo /etc/init.d/$arg restart; done
}
#/*}}}*/
function reload #== Reload a daemon, usage: reload nom_du_daemon/*{{{*/
{
  for arg in $*; do sudo /etc/init.d/$arg reload; done
}
#/*}}}*/

# Affiche une liste des fonctions comme alias le fait pour les alias
fonctions()
{
  echo -e "\n${txtpur}FONCTIONS
----------------------------------------------------------------------${txtrst}"
  echo -e "${txtcyn}myip : ${txtrst}affiche l'adresse ip"
  echo -e "${txtcyn}mktar() <dossier> :${txtrst} creer une archive tar du dossier"
  echo -e "${txtcyn}mktgz() <dossier> :${txtrst} creer une archive tar.gz du dossier"
  echo -e "${txtcyn}mktbz() <dossier> :${txtrst} creer une archive tar.bz2 du dossier"
  echo -e "${txtcyn}ex <fichier> :${txtrst} extraire un fichier"
  echo -e "${txtcyn}clock :${txtrst} Affiche une horloge simple"
  echo -e "${txtcyn}definef <mot> :${txtrst} Definition francaise d'un mot a l'aide de google"
  echo -e "${txtcyn}define <word> :${txtrst} Definition anglaise d'un mot a l'aide de google"
  echo -e "${txtcyn}resetperm <dossier> :${txtrst} restaurer les permissions des repertoires et fichiers avec leurs valeurs normales (644/755)"
  echo -e "${txtcyn}ls -l | XXX :${txtrst} XXX - mise en forme des permissions symbolic en octal (644)"
  echo -e "${txtcyn}changeEncoding <fichier>:${txtrst} Convertir l'encodage d'un fichier iso2utf8/utf82iso"
  echo -e "${txtcyn}dtc :${txtrst} affiche une quote depuis danstonchat.com"
  echo -e "${txtcyn}wdl <URL> :${txtrst} telecharger un site complet avec Wget"
  echo -e "${txtcyn}toascii <URL> :${txtrst} Transforme une image (depuis une URL) en ascci html"
  echo -e "${txtcyn}screenshot [delai en sc] [qualite] :${txtrst} prendre une capture d'ecran"
  echo -e "${txtcyn}toascii <URL> :${txtrst} tranforme une image en ascii html"
  echo -e "${txtcyn}galerie :${txtrst} Construire une gallerie html avec toutes les photo d'un dossier"
  echo -e "${txtcyn}chext new_ext *.old_ext :${txtrst} modifier l'extension" 
  echo -e "${txtcyn}cbt (Count by Type) :${txtrst} affiche le nombre de fichiers par type" 
  echo -e "${txtcyn}toLowercase <*.txt> :${txtrst} renommer en minuscules" 
  echo -e "${txtcyn}toUpercase <*.txt> :${txtrst} renommer en majuscules" 
  echo -e "${txtcyn}underscorespace <*.txt>:${txtrst} remplacer les espaces par des _"
  echo -e "${txtcyn}tempsrep <URL> :${txtrst} temps de reponse pour un URL" 
  echo -e "${txtcyn}getserver <URL> :${txtrst} Determine le serveur utilise par un site"
  echo -e "${txtcyn}start() stop() restart() reload() <daemon> :${txtrst} Controler les services"
}


bashtips() {
echo -e "
${txtpur}REPERTOIRES
----------------------------------------------------------------------${txtrst}
${txtcyn}~-          ${txtrst}repertoire precedent
${txtcyn}pushd tmp   ${txtrst}Push tmp && cd tmp
${txtcyn}popd        ${txtrst}Pop && cd
${txtcyn}save foo    ${txtrst}bookmark le dossier courant dans foo
${txtcyn}show        ${txtrst}voir une liste des bookmarks
 
${txtpur}HISTORIQUE
----------------------------------------------------------------------${txtrst}
${txtcyn}!!        ${txtrst}Derniere commande
${txtcyn}!!:p      ${txtrst}Apercu sans execution de la derniere commande
${txtcyn}!?foo     ${txtrst}Derniere commande contenant \`foo'
${txtcyn}^foo^bar^ ${txtrst}Derniere commande contenant \`foo', mais substitue avec \`bar'
${txtcyn}!!:0      ${txtrst}Derniere commande mot
${txtcyn}!!:^      ${txtrst}1er argument de la derniere commande
${txtcyn}!\$        ${txtrst}Dernier argument de la derniere commande
${txtcyn}!!:*      ${txtrst}Tout les arguments de la derniere commande
${txtcyn}!!:x-y    ${txtrst}Arguments x a y de la derniere commande
${txtcyn}[Ctrl]-s  ${txtrst}Rechercher en avant dans l'historique
${txtcyn}[Ctrl]-r  ${txtrst}Rechercher en arriere dans l'historique
 
${txtpur}EDITION DE LIGNE
----------------------------------------------------------------------${txtrst}
${txtcyn}[Ctrl]-a     ${txtrst}aller au debut de la ligne
${txtcyn}[Ctrl]-e     ${txtrst}aller a la fin de la ligne
${txtcyn}[ Alt]-d     ${txtrst}efface jusqu'a la fin d'un mot
${txtcyn}[Ctrl]-w     ${txtrst}efface jusqu'au debut d'un mot
${txtcyn}[Ctrl]-k     ${txtrst}efface jusqu'a la fin de la ligne
${txtcyn}[Ctrl]-u     ${txtrst}efface jusqu'au debut de la ligne
${txtcyn}[Ctrl]-y     ${txtrst}coller le contenu du buffer
${txtcyn}[Ctrl]-r     ${txtrst}revert all modifications to current line
${txtcyn}[Ctrl]-]     ${txtrst}chercher en avant dans la ligne
${txtcyn}[ Alt]-
  ${txtcyn}[Ctrl]-]   ${txtrst}chercher en arriere dans la ligne
${txtcyn}[Ctrl]-t     ${txtrst}switch lettre
${txtcyn}[ Alt]-t     ${txtrst}switch mot
${txtcyn}[ Alt]-u     ${txtrst}mot en Majuscule
${txtcyn}[ Alt]-l     ${txtrst}Mot en Minuscule
${txtcyn}[ Alt]-c     ${txtrst}1ere lettre du mot en Majuscule
 
${txtpur}COMPLETION
----------------------------------------------------------------------${txtrst}
${txtcyn}[ Alt].      ${txtrst}faire defiler les arguments de la derniere commande
${txtcyn}[ Alt]-/     ${txtrst}completer le nom de fichier
${txtcyn}[ Alt]-~     ${txtrst}completer le nom d'utilisateur
${txtcyn}[ Alt]-@     ${txtrst}completer le nom d'host
${txtcyn}[ Alt]-\$     ${txtrst}completer le nom de variable
${txtcyn}[ Alt]-!     ${txtrst}completer le nom d'une commande
${txtcyn}[ Alt]-^     ${txtrst}completer l'historique"
 
}

#/*}}}*/
