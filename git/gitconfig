# vim:set filetype=gitconfig

[alias]
    #a = add
    a = !git add . && git add -u && git status
    alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
    am = !git ls-files -m -z | xargs -0 git-add && git status                     # ajouter les fichiers modifiÃ©s.
    amend = !git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend
    au = !git ls-files -o --exclude-standard -z | xargs -0 git-add && git status  # ajouter les fichiers inconnus.
    #begin=reset --hard # Note that this is dangerous!
    br = branch
    browse = !bash -c 'git fetch "$1" "$2" && git checkout FETCH_HEAD' - # Fetch a repository ($1) and checkout its ref ($2) HEAD
    commit = commit -v
    c = commit
    ci = commit
    cia = commit --amend
    cs = commit -s
    cl = clone
    cleanup = !git clean -df && git stash clear
    co = checkout
    d = diff
    dc = diff --cached
    diffc = diff --cached   # Diff what is staged for the next commit
    diffst = diff --stat    # Diff overview
    fix = commit --amend -C HEAD
    g = grep
    graph = log --pretty=nice --date-order --graph  # Custom graph log (append any tree-ish)
    grapha = log --pretty=nice --date-order --graph --all   # Custom graph log for all branches
    head = !"git log -n1"
    heads = !"git log origin/master.. --format='%Cred%h%Creset;%C(yellow)%an%Creset;%H;%Cblue%f%Creset' | git name-rev --stdin --always --name-only | column -t -s';'"
    ignore=!([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore
    last = log -1 HEAD
    l = log -10 --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    ll = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    logp = log --pretty=nice --date-order   # Custom pretty log
    logsf = log --stat --format=oneline --abbrev-commit     # Short format diffstat log
    logst = log --stat  # Diffstat log
    m = merge
    p = push
    pf = push -f
    r = remote
    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbi = rebase --interactive
    rbi5 = rebase --interactive HEAD~5
    rbi10 = rebase --interactive HEAD~10
    rbi20 = rebase --interactive HEAD~20
    rbs = rebase --skip
    ru = remote update
    rv = remote -v
    rmm  = !git ls-files -d -z | xargs -0 git-rm && git status
    sh = show
    s = status -sb
    scoreboard = shortlog -sn
    st = status
    stsh = !CURRENT=$(git symbolic-ref HEAD) && git symbolic-ref HEAD refs/heads/stash && git commit -a -m stashed && git checkout $CURRENT
    t = tag
    trim = !git remote prune origin && git gc
    undo = !git reset --soft HEAD^
    wc = whatchanged -p
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    who = shortlog --numbered --summary --email --no-merges --since="3 months"  # Who is active committers on this repository
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"

[branch]
    # set up git pull to do a rebase instead of merge
    # autosetuprebase = always

[color]
    diff = auto
    status = auto
    branch = auto
    ui = auto

[core]
    autocrlf = false    # For dealing with Windows projects
    pager = less -r     # Wrap long-lines when printing on the screen
    excludesfile = ~/.gitignore     # Global gitignore
    attributesfile = ~/.gitattributes   # Global attributes

[diff]
    renames = true    # Detect renames of files

[grep]
    lineNumber = true
    extendedRegexp = true

[init]
    templatedir = ~/.git_template   # Default git hooks (will be copied over to each newly cloned repo)


[merge]
	tool = vimdiff

[pretty]
    nice = "%C(yellow)%h%C(reset) %C(white)%s%C(cyan)%d%C(reset) -- %an; %ar"

[push]
	default = current
	#default = matching

[user]
	name = Bill Linux
	email = bill.linux@laposte.net

[vim]
#	modeline = ts=8 sw=8 noet cin
